#!/usr/bin/env python
import sys
import math
from ROOT import gROOT, gStyle, TFile, TTree, TChain, TMVA, TCut, TCanvas, gDirectory, TH1, TGraph, gPad, TF1, THStack, TLegend, TH2D
import getopt

gROOT.SetBatch(True)
gStyle.SetOptStat(11)
#gStyle.SetOptFit(1)
#infile = TFile("roadCheck_predata.root")
infile = TFile("roadCheck_data.root")
#infile = TFile("roadCheck_test.root")

outfilename="roadCheck"

c = TCanvas("c","c",1200,900);
c.Print(outfilename+".pdf[")

c.Divide(2,2)

htrig = infile.Get("nimlikeVsTrig")
htrig.SetTitle("H4Y2 quad pattern vs. trigger")
c.cd(1)
gPad.SetLogz(1)
htrig.Draw("colz")
c.cd(2)
gPad.SetLogy(1)
hquadsH4NIM1 = htrig.ProjectionY("quadsH4NIM1",33,33)
hquadsH4NIM1.SetTitle("H4Y2 quad pattern, NIM1 trigger")
hquadsH4NIM1.Draw()
trigsNIM1 = hquadsH4NIM1.Integral()
c.cd(3)
gPad.SetLogy(1)
hquadsH4DP = htrig.ProjectionY("quadsH4DP",65,65)
hquadsH4DP.SetTitle("H4Y2 quad pattern, DP trigger")
hquadsH4DP.Draw()
trigsDP = hquadsH4DP.Integral()
c.cd(4)
gPad.SetLogy(1)
hquadsH4NIM3 = htrig.ProjectionY("quadsH4NIM3",129,129)
hquadsH4NIM3.SetTitle("H4Y2 quad pattern, NIM3 trigger")
hquadsH4NIM3.Draw()
trigsNIM3 = hquadsH4NIM3.Integral()
c.cd()
c.Print(outfilename+".pdf");
print("trigger counts: {0} NIM1, {1} DP, {2} NIM3".format(trigsNIM1,trigsDP,trigsNIM3))

htrig = infile.Get("roadsVsTrig")
htrig.SetTitle("DP L2 quad pattern vs. trigger")
c.cd(1)
gPad.SetLogz(1)
htrig.Draw("colz")
c.cd(2)
gPad.SetLogy(1)
hquadsH4NIM1 = htrig.ProjectionY("quadsH4NIM1",33,33)
hquadsH4NIM1.SetTitle("DP L2 quad pattern, NIM1 trigger")
hquadsH4NIM1.Draw()
trigsNIM1 = hquadsH4NIM1.Integral()
c.cd(3)
gPad.SetLogy(1)
hquadsH4DP = htrig.ProjectionY("quadsH4DP",65,65)
hquadsH4DP.SetTitle("DP L2 quad pattern, DP trigger")
hquadsH4DP.Draw()
trigsDP = hquadsH4DP.Integral()
c.cd(4)
gPad.SetLogy(1)
hquadsH4NIM3 = htrig.ProjectionY("quadsH4NIM3",129,129)
hquadsH4NIM3.SetTitle("DP L2 quad pattern, NIM3 trigger")
hquadsH4NIM3.Draw()
trigsNIM3 = hquadsH4NIM3.Integral()
c.cd()
c.Print(outfilename+".pdf");


c.Clear()
c.Divide(3,2)

for quad in range(0,4):
    hDP = infile.Get("fbCorrHist_{0}".format(quad))
    hDP.SetTitle("DP trigger, in time, quad {0};St1 bar;St2 bar".format(quad))
    hDP.Scale(1000.0/trigsDP)
    hNIM3 = infile.Get("fbCorrHistNIM3_{0}".format(quad))
    hNIM3.SetTitle("NIM3 trigger, quad {0};St1 bar;St2 bar".format(quad))
    hNIM3.Scale(1000.0/trigsNIM3)
    hoffby1 = infile.Get("fbCorrHistOffByOne_{0}".format(quad))
    hoffby1.SetTitle("DP trigger, off by 1 bucket, quad {0};St1 bar;St2 bar".format(quad))
    hoffby1.Scale(1000.0/trigsDP)
    hNIM1 = infile.Get("fbCorrHistNIM1_{0}".format(quad))
    hNIM1.SetTitle("NIM1 trigger, quad {0};St1 bar;St2 bar".format(quad))
    hNIM1.Scale(1000.0/trigsNIM1)
    c.cd(1)
    gPad.SetLogy(0)
    gPad.SetLogz(0)
    hDP.Draw("colz")
    c.cd(2)
    gPad.SetLogy(0)
    hoffby1.Draw("colz")
    c.cd(3)
    gPad.SetLogy(0)
    hNIM3.Draw("colz")
    c.cd(4)
    gPad.SetLogy(0)
    hNIM1.Draw("colz")
    c.cd(5)
    gPad.SetLogy(0)
    hDiv = hDP.Clone()
    hDiv.SetTitle("DP divided by off-by-1 (normalized to triggers)")
    hDiv.Divide(hoffby1)
    #hDiv.Scale(1.0*hoffby1.GetEntries()/hDP.GetEntries())
    hDiv.GetZaxis().SetRangeUser(0.5,1.5)
    hDiv.Draw("colz")
    c.cd(6)
    gPad.SetLogy(0)
    hDiv2 = hDP.Clone()
    hDiv2.SetTitle("DP divided by NIM3 (normalized to integral)")
    hDiv2.Divide(hNIM3)
    hDiv2.Scale(hNIM3.Integral()/hDP.Integral())
    hDiv2.GetZaxis().SetRangeUser(0.5,1.5)
    hDiv2.Draw("colz")
    c.cd()
    c.Print(outfilename+".pdf");

for quad in range(0,4):
    hDP = infile.Get("bhCorrHist_{0}".format(quad))
    hDP.SetTitle("DP trigger, in time, quad {0};H4Y2 bar;St2 bar".format(quad))
    hDP.Scale(1000.0/trigsDP)
    hNIM3 = infile.Get("bhCorrHistNIM3_{0}".format(quad))
    hNIM3.SetTitle("NIM3 trigger, quad {0};H4Y2 bar;St2 bar".format(quad))
    hNIM3.Scale(1000.0/trigsNIM3)
    hoffby1 = infile.Get("bhCorrHistOffByOne_{0}".format(quad))
    hoffby1.SetTitle("DP trigger, off by 1 bucket, quad {0};H4Y2 bar;St2 bar".format(quad))
    hoffby1.Scale(1000.0/trigsDP)
    hNIM1 = infile.Get("bhCorrHistNIM1_{0}".format(quad))
    hNIM1.SetTitle("NIM1 trigger, quad {0};H4Y2 bar;St2 bar".format(quad))
    hNIM1.Scale(1000.0/trigsNIM1)
    c.cd(1)
    gPad.SetLogy(0)
    gPad.SetLogz(0)
    hDP.Draw("colz")
    c.cd(2)
    gPad.SetLogy(0)
    hoffby1.Draw("colz")
    c.cd(3)
    gPad.SetLogy(0)
    hNIM3.Draw("colz")
    c.cd(4)
    gPad.SetLogy(0)
    hNIM1.Draw("colz")
    c.cd(5)
    gPad.SetLogy(0)
    hDiv = hDP.Clone()
    hDiv.SetTitle("DP divided by off-by-1 (normalized to triggers)")
    hDiv.Divide(hoffby1)
    #hDiv.Scale(1.0*hoffby1.GetEntries()/hDP.GetEntries())
    hDiv.GetZaxis().SetRangeUser(0.5,1.5)
    hDiv.Draw("colz")
    c.cd(6)
    gPad.SetLogy(0)
    hDiv2 = hDP.Clone()
    hDiv2.SetTitle("DP divided by NIM3 (normalized to integral)")
    hDiv2.Divide(hNIM3)
    hDiv2.Scale(hNIM3.Integral()/hDP.Integral())
    hDiv2.GetZaxis().SetRangeUser(0.5,1.5)
    hDiv2.Draw("colz")
    c.cd()
    c.Print(outfilename+".pdf");

c.Clear()
c.Divide(2,2)

stationnames=["St1", "St2", "H4Y2"]

for quad in range(0,12):
    quadname = stationnames[quad/4]
    hDP = infile.Get("hitEleHist_{0}".format(quad))
    hDP.SetTitle("DP trigger, {1}, quad {0};{1} bar".format(quad%4,quadname))
    hDP.Scale(1.0/trigsDP)
    hDP.GetYaxis().SetRangeUser(0,1.1*hDP.GetMaximum())
    hNIM3 = infile.Get("hitEleHistNIM3_{0}".format(quad))
    hNIM3.SetTitle("NIM3 trigger, {1}, quad {0};{1} bar".format(quad%4,quadname))
    hNIM3.Scale(1.0/trigsNIM3)
    hNIM3.GetYaxis().SetRangeUser(0,1.1*hNIM3.GetMaximum())
    hNIM1 = infile.Get("hitEleHistNIM1_{0}".format(quad))
    hNIM1.SetTitle("NIM1 trigger, {1}, quad {0};{1} bar".format(quad%4,quadname))
    hNIM1.Scale(1.0/trigsNIM1)
    hNIM1.GetYaxis().SetRangeUser(0,1.1*hNIM1.GetMaximum())
    c.cd(1)
    hDP.Draw("HIST")
    c.cd(2)
    hNIM3.Draw("HIST")
    c.cd(3)
    hNIM1.Draw("HIST")
    c.cd(4)
    hRatio = hDP.Clone()
    hRatio.Divide(hNIM3)
    hRatio.GetYaxis().SetRangeUser(hRatio.GetBinContent(hRatio.GetMinimumBin())-1.0,hRatio.GetBinContent(hRatio.GetMaximumBin())+1.0)
    #hRatio.Draw("HIST P")
    hRatio.Draw("")
    hRatio.SetTitle("ratio of DP to NIM3, {1}, quad {0};{1} bar".format(quad%4,quadname))
    c.cd()
    c.Print(outfilename+".pdf");

for quad in range(0,12):
    quadname = stationnames[quad/4]
    hDP = infile.Get("hitTimeHist_{0}".format(quad))
    hDP.SetTitle("DP trigger, {1}, quad {0};hit time [ns];{1} bar".format(quad%4,quadname))
    hDP.Scale(100.0/trigsDP)
    #hDP.RebinX(16)
    #hDP.GetYaxis().SetRangeUser(0,1.1*hDP.GetMaximum())
    hNIM3 = infile.Get("hitTimeHistNIM3_{0}".format(quad))
    hNIM3.SetTitle("NIM3 trigger, {1}, quad {0};hit time [ns];{1} bar".format(quad%4,quadname))
    hNIM3.Scale(100.0/trigsNIM3)
    #hNIM3.RebinX(16)
    #hNIM3.GetYaxis().SetRangeUser(0,1.1*hNIM3.GetMaximum())
    hNIM1 = infile.Get("hitTimeHistNIM1_{0}".format(quad))
    hNIM1.SetTitle("NIM1 trigger, {1}, quad {0};hit time [ns];{1} bar".format(quad%4,quadname))
    hNIM1.Scale(100.0/trigsNIM1)
    #hNIM1.RebinX(16)
    #hNIM1.GetYaxis().SetRangeUser(0,1.1*hNIM1.GetMaximum())
    c.cd(1)
    hDP.Draw("colz")
    c.cd(2)
    hNIM3.Draw("colz")
    c.cd(3)
    hNIM1.Draw("colz")
    c.cd(4)
    hRatio = hDP.Clone()
    hRatio.RebinX(16)
    hRatio.Divide(hNIM3.Clone().RebinX(16))
    hRatio.GetZaxis().SetRangeUser(0,10)
    #hRatio.Draw("HIST P")
    hRatio.Draw("colz")
    hRatio.SetTitle("ratio of DP to NIM3, {1}, quad {0};hit time [ns];{1} bar".format(quad%4,quadname))
    c.cd()
    c.Print(outfilename+".pdf");


hrawtimes = infile.Get("rawTimeHists")
hrawtimes.Scale(1000.0/trigsDP)
hrawtimesNIM1 = infile.Get("rawTimeHistsNIM1")
hrawtimesNIM1.Scale(1000.0/trigsNIM1)
hDCtimes = hrawtimes.ProjectionX("DCtimes",20,25)
hDCtimesNIM1 = hrawtimesNIM1.ProjectionX("DCtimesNIM1",20,25)
c.Clear()
c.Divide(1,2)

c.cd(1)
hrawtimes.Draw("colz")
c.cd(2)
hrawtimesNIM1.Draw("colz")
c.cd()
c.Print(outfilename+".pdf");

c.cd(1)
hDCtimes.Draw("HIST")
hDCtimes.GetXaxis().SetRangeUser(1270,1820)
c.cd(2)
hDCtimesNIM1.Draw("HIST")
hDCtimesNIM1.GetXaxis().SetRangeUser(1100,1650)

c.cd()
c.Print(outfilename+".pdf");

c.Print(outfilename+".pdf]");

